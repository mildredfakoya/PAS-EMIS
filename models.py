import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate, MigrateCommand
from flask_script import Manager
from dotenv import load_dotenv

load_dotenv(".env")
app = Flask(__name__)

"""
DATABASE CONFIGURATION FOR CREATING OBJECT OF SQLAlchemy
# Mysql database, user name root, no password. if your sql database uses a password, the syntax is as below.
# add your mysql password and database name
# app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql:password//root@localhost/database_name'
"""
app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get("SQLALCHEMY_DATABASE_URI")
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)
manager = Manager(app)
manager.add_command("db", MigrateCommand)

"""
CREATING THE ROLES, PERMISSIONS AND USER TABLE MODELS
The roles table holds the defined roles of the system which will be defined by the administrator.
The permissions table holds the defined permission which could be grouped by role_id using the role_id column as a foreign_key
The role_id column of the roles table is a foreign key to the role_id column of the permissions table.
The user table holds the data for created users. The activication code should be autogenerated and sent in the verify email for the suser to activate 
their account.
last seen displays the date and time that the user last logged_in
last_modified displays the date and time that the user account was last modified
modified_by displays the name of the administratgor who last modified the user's account
"""


class Roles(db.Model):

    __tablename__ = "roles"

    id = db.Column(db.Integer, primary_key=True)
    role_id = db.Column(db.Integer, unique=True)
    role_name = db.Column(db.String(50), unique=True)
    # permission = db.relationship("Permissions", backref="roles")
    # user = db.relationship("Users", backref="roles")


class Permissions(db.Model):

    __tablename__ = "permissions"

    id = db.Column(db.Integer, primary_key=True)
    role = db.Column(db.String(50))
    # role = db.Column(db.Integer, db.ForeignKey('roles.role_id'))
    # permission_role = db.relationship("Roles", cascade="save-update")
    permission_id = db.Column(db.Integer, unique=True)
    permission_name = db.Column(db.String(30), unique=True)


class Users(db.Model):

    __tablename__ = "users"

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.String(20), unique=True)
    user_email = db.Column(db.String(255))
    user_email_encrypted = db.Column(db.Integer, db.ForeignKey("userencryption.id"))
    user_password_encrypted = db.Column(db.Integer, db.ForeignKey("userencryption.id"))
    user_first_name_encrypted = db.Column(
        db.Integer, db.ForeignKey("userencryption.id")
    )
    user_middle_name_encrypted = db.Column(
        db.Integer, db.ForeignKey("userencryption.id")
    )
    user_last_name_encrypted = db.Column(db.Integer, db.ForeignKey("userencryption.id"))

    # user_role = db.Column(db.String(50), db.ForeignKey('roles.role_name'), unique = True)
    # users_role = db.relationship("Roles", cascade="save-update")

    activation_code = db.Column(db.String(255), unique=True)
    activitaion_status = db.Column(db.String(255))
    last_seen = db.Column(db.DateTime)
    last_modified = db.Column(db.DateTime)
    modified_by = db.Column(db.String(255), unique=True)


class Userpermissions(db.Model):

    __tablename__ = "userpermissions"

    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(255), unique=True)
    # email = db.Column(db.String(255), db.ForeignKey('users.user_email'))
    # user = db.relationship("Users", cascade="save-update")

    permissions = db.Column(db.Text)


class UserEncryption(db.Model):
    __tablename__ = "userencryption"
    id = db.Column(db.Integer, primary_key=True)
    tag = db.Column(db.LargeBinary())
    ciphertext = db.Column(db.LargeBinary())
    nonce = db.Column(db.LargeBinary())


if __name__ == "__main__":
    manager.run()